{
  "address": "0x5eBE6fAF2d1c8fc6226babD515E84b6FEF70F966",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_logic",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "ETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "admin_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "changeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cruizeProxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cruizeTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "currentQueuedWithdrawalShares",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "depositReceipts",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "round",
          "type": "uint16"
        },
        {
          "internalType": "uint104",
          "name": "amount",
          "type": "uint104"
        },
        {
          "internalType": "uint128",
          "name": "unredeemedShares",
          "type": "uint128"
        },
        {
          "internalType": "uint104",
          "name": "totalDeposit",
          "type": "uint104"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gnosisSafe",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "implementation_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isDisable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isManagementFeeEnable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPerformanceFeeEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastQueuedWithdrawAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "managementFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "module",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performanceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "roundPricePerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vaults",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "round",
          "type": "uint16"
        },
        {
          "internalType": "uint104",
          "name": "lockedAmount",
          "type": "uint104"
        },
        {
          "internalType": "uint128",
          "name": "totalPending",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "queuedWithdrawShares",
          "type": "uint128"
        },
        {
          "internalType": "uint104",
          "name": "cap",
          "type": "uint104"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "withdrawals",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "round",
          "type": "uint16"
        },
        {
          "internalType": "uint128",
          "name": "shares",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xeb77fa9edf623a536bed9641a56b9da83f7ec086c6c1f81ddaac392bf1e7add8",
  "receipt": {
    "to": null,
    "from": "0x96d331Ca0D9c9D1b53A46CD050A698ae4c4c246F",
    "contractAddress": "0x5eBE6fAF2d1c8fc6226babD515E84b6FEF70F966",
    "transactionIndex": 8,
    "gasUsed": "925596",
    "logsBloom": "0x
    "blockHash": "0xa94a06bb21356b8164023e7592c47b7e24d4de7012008ae01a2a8a8342956827",
    "transactionHash": "0xeb77fa9edf623a536bed9641a56b9da83f7ec086c6c1f81ddaac392bf1e7add8",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 32359552,
        "transactionHash": "0xeb77fa9edf623a536bed9641a56b9da83f7ec086c6c1f81ddaac392bf1e7add8",
        "address": "0x5eBE6fAF2d1c8fc6226babD515E84b6FEF70F966",
        "topics": [
          "0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b",
          "0x00000000000000000000000047524b15946af7ae5f005f93df619741ac454f28"
        ],
        "data": "0x",
        "logIndex": 22,
        "blockHash": "0xa94a06bb21356b8164023e7592c47b7e24d4de7012008ae01a2a8a8342956827"
      },
      {
        "transactionIndex": 8,
        "blockNumber": 32359552,
        "transactionHash": "0xeb77fa9edf623a536bed9641a56b9da83f7ec086c6c1f81ddaac392bf1e7add8",
        "address": "0x5eBE6fAF2d1c8fc6226babD515E84b6FEF70F966",
        "topics": [
          "0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000096d331ca0d9c9d1b53a46cd050a698ae4c4c246f",
        "logIndex": 23,
        "blockHash": "0xa94a06bb21356b8164023e7592c47b7e24d4de7012008ae01a2a8a8342956827"
      },
      {
        "transactionIndex": 8,
        "blockNumber": 32359552,
        "transactionHash": "0xeb77fa9edf623a536bed9641a56b9da83f7ec086c6c1f81ddaac392bf1e7add8",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000096d331ca0d9c9d1b53a46cd050a698ae4c4c246f",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000056d02bf4678e80000000000000000000000000000000000000000000000000773aa0240d1741e000000000000000000000000000000000000000000002dd5e5cae9434b99df70000000000000000000000000000000000000000000000000076e3cff818afb36000000000000000000000000000000000000000000002dd5e5d056460ae05858",
        "logIndex": 24,
        "blockHash": "0xa94a06bb21356b8164023e7592c47b7e24d4de7012008ae01a2a8a8342956827"
      }
    ],
    "blockNumber": 32359552,
    "cumulativeGasUsed": "1700523",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x47524b15946af7aE5F005f93dF619741ac454F28",
    "0x96d331Ca0D9c9D1b53A46CD050A698ae4c4c246F",
    "0x"
  ],
  "numDeployments": 1,
  "solcInputHash": "be2053777f39d1742dda508d0adbeed5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"ETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cruizeProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cruizeTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"currentQueuedWithdrawalShares\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositReceipts\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"round\",\"type\":\"uint16\"},{\"internalType\":\"uint104\",\"name\":\"amount\",\"type\":\"uint104\"},{\"internalType\":\"uint128\",\"name\":\"unredeemedShares\",\"type\":\"uint128\"},{\"internalType\":\"uint104\",\"name\":\"totalDeposit\",\"type\":\"uint104\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gnosisSafe\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDisable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isManagementFeeEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPerformanceFeeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastQueuedWithdrawAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managementFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"module\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"roundPricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"round\",\"type\":\"uint16\"},{\"internalType\":\"uint104\",\"name\":\"lockedAmount\",\"type\":\"uint104\"},{\"internalType\":\"uint128\",\"name\":\"totalPending\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"queuedWithdrawShares\",\"type\":\"uint128\"},{\"internalType\":\"uint104\",\"name\":\"cap\",\"type\":\"uint104\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawals\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"round\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"shares\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"admin()\":{\"details\":\"Returns the current admin. NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}. TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\"},\"changeAdmin(address)\":{\"details\":\"Changes the admin of the proxy. Emits an {AdminChanged} event. NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\"},\"implementation()\":{\"details\":\"Returns the current implementation. NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}. TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy. NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy, and then call a function from the new implementation as specified by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the proxied contract. NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ETH()\":{\"notice\":\"ETH 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\"},\"crContract()\":{\"notice\":\"crContract address that will be used to create new crcontract clone\"},\"cruizeProxy()\":{\"notice\":\"gnosis safe address where all the fund will be locked\"},\"cruizeTokens(address)\":{\"notice\":\"crtokens mint for user's share's\"},\"currentQueuedWithdrawalShares(address)\":{\"notice\":\"Queued withdraw shares for the current round\"},\"depositReceipts(address,address)\":{\"notice\":\"Stores the user's pending deposit for the round\"},\"feeRecipient()\":{\"notice\":\"Fee recipient for the management fees\"},\"gnosisSafe()\":{\"notice\":\"gnosis safe address where all the fund will be locked\"},\"isDisable(address)\":{\"notice\":\"Enable/Disable tokens\"},\"lastQueuedWithdrawAmounts(address)\":{\"notice\":\"Queued withdrawal amount in the last round\"},\"managementFee()\":{\"notice\":\"Management fee charged on entire AUM in rollToNextOption. Only charged when there is no loss.\"},\"module()\":{\"notice\":\"role in charge of weekly vault operations such as transfer fund and burn tokens\"},\"performanceFee()\":{\"notice\":\"Performance fee charged on premiums earned in rollToNextOption. Only charged when there is no loss.\"},\"roundPricePerShare(address,uint16)\":{\"notice\":\"On every round's close, the pricePerShare value of an crToken token is stored This is used to determine the number of shares to be returned to a user with their DepositReceipt.depositAmount\"},\"vaults(address)\":{\"notice\":\"Stores vaults state for every round\"},\"withdrawals(address,address)\":{\"notice\":\"Stores pending user withdrawals\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/proxies/CruizeProxy.sol\":\"CruizeProxy\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0xa6a787e7a901af6511e19aa53e1a00352db215a011d2c7a438d0582dd5da76f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/libraries/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.6;\\n\\nlibrary Types {\\n    /************************************************\\n     *  IMMUTABLES & CONSTANTS\\n     ***********************************************/\\n    uint256 internal constant UNIT = 10**18;\\n    uint256 internal constant PLACEHOLDER_UINT = 1;\\n\\n    struct VaultState {\\n        // 32 byte slot 1\\n        // Current round number. `round` represents the number of `period`s elapsed.\\n        uint16 round;\\n        // Amount that is currently locked for selling options\\n        uint104 lockedAmount;\\n        uint128 totalPending;\\n        // Total amount of queued withdrawal shares from previous rounds (doesn't include the current round)\\n        uint128 queuedWithdrawShares;\\n        //  Total amount that can be held in a vault.\\n        uint104 cap;\\n    }\\n\\n    struct DepositReceipt {\\n        // Maximum of 65535 rounds. Assuming 1 round is 7 days, maximum is 1256 years.\\n        uint16 round;\\n        // Deposit amount, max 20,282,409,603,651 or 20 trillion ETH deposit\\n        uint104 amount;\\n        // Unredeemed shares balance\\n        uint128 unredeemedShares;\\n        //  total locked amount.\\n        uint104 totalDeposit;\\n\\n    }\\n\\n    struct Withdrawal {\\n        // Maximum of 65535 rounds. Assuming 1 round is 7 days, maximum is 1256 years.\\n        uint16 round;\\n        // Number of shares withdrawn\\n        uint128 shares;\\n    }\\n\\n    struct CloseParams {\\n        // Decimals of  token\\n        uint256 decimals;\\n        // Total balance of token.\\n        uint256 totalBalance;\\n        //  Total share supply for an round.\\n        uint256 currentShareSupply;\\n        //  Total queued withdrawal from the last round.\\n        uint256 lastQueuedWithdrawAmount;\\n        //  Total  current round queued withdrawal.\\n        uint256 currentQueuedWithdrawShares;\\n    }\\n}\\n\",\"keccak256\":\"0x7dfcecf818501198ae1a736bee1d62b6c268f2575313e7804cb534206e3a4cac\",\"license\":\"MIT\"},\"contracts/proxies/CruizeProxy.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity =0.8.6;\\nimport \\\"../storage/CruizeStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\ncontract CruizeProxy is CruizeStorage, TransparentUpgradeableProxy {\\n    constructor(\\n        address _logic,\\n        address admin,\\n        bytes memory _data\\n    ) TransparentUpgradeableProxy(_logic, admin, _data) {}\\n}\\n\",\"keccak256\":\"0x50a380fed4c468ed6ee80efc173cc11b2fcbeaf1294a21e03126c503dc2566c7\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/storage/CruizeStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.6;\\nimport \\\"../libraries/Types.sol\\\";\\n\\nabstract contract CruizeStorage {\\n    /************************************************\\n     *  IMMUTABLES & CONSTANTS\\n     ***********************************************/\\n\\n    /// @notice Fee recipient for the management fees\\n    address public feeRecipient;\\n    /// @notice Performance fee charged on premiums earned in rollToNextOption. Only charged when there is no loss.\\n    uint256 public performanceFee;\\n    bool public isPerformanceFeeEnabled;\\n    /// @notice Management fee charged on entire AUM in rollToNextOption. Only charged when there is no loss.\\n    uint256 public managementFee;\\n    bool public isManagementFeeEnable;\\n    /// @notice role in charge of weekly vault operations such as transfer fund and burn tokens\\n    address public module;\\n\\n    /// @notice gnosis safe address where all the fund will be locked\\n    address public gnosisSafe;\\n    /// @notice gnosis safe address where all the fund will be locked\\n    address public cruizeProxy;\\n    /// @notice crContract address that will be used to create new crcontract clone\\n    address public crContract;\\n    /// @notice ETH 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\\n    address public constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    // Fees are 6-decimal places. For example: 20 * 10**18 = 20%\\n    uint256 internal constant FEE_MULTIPLIER = 10**18;\\n    // Number of weeks per year = 52.142857 weeks * FEE_MULTIPLIER = 52142857\\n    // Dividing by weeks per year requires doing num.mul(FEE_MULTIPLIER).div(WEEKS_PER_YEAR)\\n    uint256 internal constant WEEKS_PER_YEAR = 52.142857 ether;\\n\\n    //----------------------------//\\n    //        Mappings            //\\n    //----------------------------//\\n    /// @notice crtokens mint for user's share's\\n    mapping(address => address) public cruizeTokens;\\n    /// @notice Enable/Disable tokens\\n    mapping(address => bool) public isDisable;\\n    /// @notice Stores vaults state for every round\\n    mapping(address => Types.VaultState) public vaults;\\n    /// @notice Queued withdrawal amount in the last round\\n    mapping(address => uint256) public lastQueuedWithdrawAmounts;\\n    /// @notice Queued withdraw shares for the current round\\n    mapping(address => uint128) public currentQueuedWithdrawalShares;\\n    /// @notice Stores pending user withdrawals\\n    mapping(address => mapping(address => Types.Withdrawal)) public withdrawals;\\n    /// @notice Stores the user's pending deposit for the round\\n    mapping(address => mapping(address => Types.DepositReceipt))\\n        public depositReceipts;\\n    /// @notice On every round's close, the pricePerShare value of an crToken token is stored\\n    /// This is used to determine the number of shares to be returned\\n    /// to a user with their DepositReceipt.depositAmount\\n    mapping(address => mapping(uint16 => uint256)) public roundPricePerShare;\\n\\n     /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    address[] public tokens;\\n    uint256[49] private __cruize_gap;\\n}\\n\",\"keccak256\":\"0xda92a71d840b0a6631890a63019b6317b8e30e0a385c19afc03cb3d444b7fcdd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620014a5380380620014a583398101604081905262000034916200046c565b8282828281620000478282600062000061565b50620000559050826200009e565b505050505050620005e4565b6200006c83620000f9565b6000825111806200007a5750805b1562000099576200009783836200013b60201b620007cf1760201c565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f620000c96200016a565b604080516001600160a01b03928316815291841660208301520160405180910390a1620000f681620001a3565b50565b620001048162000258565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606200016383836040518060600160405280602781526020016200147e602791396200030c565b9392505050565b6000620001946000805160206200145e83398151915260001b6200038b60201b620007771760201c565b546001600160a01b0316919050565b6001600160a01b0381166200020e5760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b80620002376000805160206200145e83398151915260001b6200038b60201b620007771760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6200026e816200038e60201b620007fb1760201c565b620002d25760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840162000205565b80620002377f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b6200038b60201b620007771760201c565b6060600080856001600160a01b0316856040516200032b91906200054c565b600060405180830381855af49150503d806000811462000368576040519150601f19603f3d011682016040523d82523d6000602084013e6200036d565b606091505b50909250905062000381868383876200039d565b9695505050505050565b90565b6001600160a01b03163b151590565b606083156200040e57825162000406576001600160a01b0385163b620004065760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640162000205565b50816200041a565b6200041a838362000422565b949350505050565b815115620004335781518083602001fd5b8060405162461bcd60e51b81526004016200020591906200056a565b80516001600160a01b03811681146200046757600080fd5b919050565b6000806000606084860312156200048257600080fd5b6200048d846200044f565b92506200049d602085016200044f565b60408501519092506001600160401b0380821115620004bb57600080fd5b818601915086601f830112620004d057600080fd5b815181811115620004e557620004e5620005ce565b604051601f8201601f19908116603f01168101908382118183101715620005105762000510620005ce565b816040528281528960208487010111156200052a57600080fd5b6200053d8360208301602088016200059f565b80955050505050509250925092565b60008251620005608184602087016200059f565b9190910192915050565b60208152600082518060208401526200058b8160408501602087016200059f565b601f01601f19169190910160400192915050565b60005b83811015620005bc578181015183820152602001620005a2565b83811115620000975750506000910152565b634e487b7160e01b600052604160045260246000fd5b610e6a80620005f46000396000f3fe60806040526004361061014f5760003560e01c806387788782116100b6578063a84173ae1161006f578063a84173ae146104fc578063b86d52981461051c578063c54c8ddc14610541578063cd47bde114610571578063e7de1670146105e0578063f851a4401461062e5761015e565b806387788782146103465780638f2839701461035c5780639367a8e51461037c57806397b7ea7d14610422578063a622ee7c1461043c578063a6f7f5d6146104e65761015e565b80635c60da1b116101085780635c60da1b1461025c578063619954aa14610271578063717edf281461029b5780637f288b26146102bb5780638322fff2146102f157806386fcf7f6146103195761015e565b8063108efa931461016657806324116b99146101a35780633659cfe6146101e957806346904840146102095780634f1ef286146102295780634f64b2be1461023c5761015e565b3661015e5761015c610643565b005b61015c610643565b34801561017257600080fd5b50600654610186906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101af57600080fd5b506101db6101be366004610d3b565b600f60209081526000928352604080842090915290825290205481565b60405190815260200161019a565b3480156101f557600080fd5b5061015c610204366004610c6a565b61065d565b34801561021557600080fd5b50600054610186906001600160a01b031681565b61015c610237366004610cb8565b6106a4565b34801561024857600080fd5b50610186610257366004610d79565b610715565b34801561026857600080fd5b5061018661073f565b34801561027d57600080fd5b5060025461028b9060ff1681565b604051901515815260200161019a565b3480156102a757600080fd5b50600754610186906001600160a01b031681565b3480156102c757600080fd5b506101866102d6366004610c6a565b6008602052600090815260409020546001600160a01b031681565b3480156102fd57600080fd5b5061018673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b34801561032557600080fd5b506101db610334366004610c6a565b600b6020526000908152604090205481565b34801561035257600080fd5b506101db60015481565b34801561036857600080fd5b5061015c610377366004610c6a565b61077a565b34801561038857600080fd5b506103e6610397366004610c85565b600e6020908152600092835260408084209091529082529020805460019091015461ffff8216916201000081046001600160681b0390811692600160781b9092046001600160801b0316911684565b6040805161ffff90951685526001600160681b0393841660208601526001600160801b039092169184019190915216606082015260800161019a565b34801561042e57600080fd5b5060045461028b9060ff1681565b34801561044857600080fd5b506104a6610457366004610c6a565b600a602052600090815260409020805460019091015461ffff8216916001600160681b036201000082048116926001600160801b03600160781b909304831692811691600160801b9091041685565b6040805161ffff90961686526001600160681b0394851660208701526001600160801b03938416908601529116606084015216608082015260a00161019a565b3480156104f257600080fd5b506101db60035481565b34801561050857600080fd5b50600554610186906001600160a01b031681565b34801561052857600080fd5b506004546101869061010090046001600160a01b031681565b34801561054d57600080fd5b5061028b61055c366004610c6a565b60096020526000908152604090205460ff1681565b34801561057d57600080fd5b506105be61058c366004610c85565b600d60209081526000928352604080842090915290825290205461ffff8116906201000090046001600160801b031682565b6040805161ffff90931683526001600160801b0390911660208301520161019a565b3480156105ec57600080fd5b506106166105fb366004610c6a565b600c602052600090815260409020546001600160801b031681565b6040516001600160801b03909116815260200161019a565b34801561063a57600080fd5b506101866107a4565b61064b61080a565b61065b6106566108a9565b6108b3565b565b6106656108d7565b6001600160a01b0316336001600160a01b0316141561069c576106998160405180602001604052806000815250600061090a565b50565b610699610643565b6106ac6108d7565b6001600160a01b0316336001600160a01b0316141561070d576107088383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506001925061090a915050565b505050565b610708610643565b6010818154811061072557600080fd5b6000918252602090912001546001600160a01b0316905081565b60006107496108d7565b6001600160a01b0316336001600160a01b0316141561076f5761076a6108a9565b905090565b610777610643565b90565b6107826108d7565b6001600160a01b0316336001600160a01b0316141561069c5761069981610935565b60006107ae6108d7565b6001600160a01b0316336001600160a01b0316141561076f5761076a6108d7565b60606107f48383604051806060016040528060278152602001610e0e60279139610989565b9392505050565b6001600160a01b03163b151590565b6108126108d7565b6001600160a01b0316336001600160a01b0316141561065b5760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b600061076a610a01565b3660008037600080366000845af43d6000803e8080156108d2573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b61091383610a29565b6000825111806109205750805b156107085761092f83836107cf565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f61095e6108d7565b604080516001600160a01b03928316815291841660208301520160405180910390a161069981610a69565b6060600080856001600160a01b0316856040516109a69190610d92565b600060405180830381855af49150503d80600081146109e1576040519150601f19603f3d011682016040523d82523d6000602084013e6109e6565b606091505b50915091506109f786838387610b12565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6108fb565b610a3281610b90565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b038116610ace5760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084016108a0565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b60608315610b7e578251610b77576001600160a01b0385163b610b775760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108a0565b5081610b88565b610b888383610c24565b949350505050565b6001600160a01b0381163b610bfd5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016108a0565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610af1565b815115610c345781518083602001fd5b8060405162461bcd60e51b81526004016108a09190610dae565b80356001600160a01b0381168114610c6557600080fd5b919050565b600060208284031215610c7c57600080fd5b6107f482610c4e565b60008060408385031215610c9857600080fd5b610ca183610c4e565b9150610caf60208401610c4e565b90509250929050565b600080600060408486031215610ccd57600080fd5b610cd684610c4e565b9250602084013567ffffffffffffffff80821115610cf357600080fd5b818601915086601f830112610d0757600080fd5b813581811115610d1657600080fd5b876020828501011115610d2857600080fd5b6020830194508093505050509250925092565b60008060408385031215610d4e57600080fd5b610d5783610c4e565b9150602083013561ffff81168114610d6e57600080fd5b809150509250929050565b600060208284031215610d8b57600080fd5b5035919050565b60008251610da4818460208701610de1565b9190910192915050565b6020815260008251806020840152610dcd816040850160208701610de1565b601f01601f19169190910160400192915050565b60005b83811015610dfc578181015183820152602001610de4565b8381111561092f575050600091015256fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122036f809c4e904b02e83039b44d692edff671b576c18d4d8095c601174249a077a64736f6c63430008060033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
  "deployedBytecode": "0x60806040526004361061014f5760003560e01c806387788782116100b6578063a84173ae1161006f578063a84173ae146104fc578063b86d52981461051c578063c54c8ddc14610541578063cd47bde114610571578063e7de1670146105e0578063f851a4401461062e5761015e565b806387788782146103465780638f2839701461035c5780639367a8e51461037c57806397b7ea7d14610422578063a622ee7c1461043c578063a6f7f5d6146104e65761015e565b80635c60da1b116101085780635c60da1b1461025c578063619954aa14610271578063717edf281461029b5780637f288b26146102bb5780638322fff2146102f157806386fcf7f6146103195761015e565b8063108efa931461016657806324116b99146101a35780633659cfe6146101e957806346904840146102095780634f1ef286146102295780634f64b2be1461023c5761015e565b3661015e5761015c610643565b005b61015c610643565b34801561017257600080fd5b50600654610186906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101af57600080fd5b506101db6101be366004610d3b565b600f60209081526000928352604080842090915290825290205481565b60405190815260200161019a565b3480156101f557600080fd5b5061015c610204366004610c6a565b61065d565b34801561021557600080fd5b50600054610186906001600160a01b031681565b61015c610237366004610cb8565b6106a4565b34801561024857600080fd5b50610186610257366004610d79565b610715565b34801561026857600080fd5b5061018661073f565b34801561027d57600080fd5b5060025461028b9060ff1681565b604051901515815260200161019a565b3480156102a757600080fd5b50600754610186906001600160a01b031681565b3480156102c757600080fd5b506101866102d6366004610c6a565b6008602052600090815260409020546001600160a01b031681565b3480156102fd57600080fd5b5061018673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b34801561032557600080fd5b506101db610334366004610c6a565b600b6020526000908152604090205481565b34801561035257600080fd5b506101db60015481565b34801561036857600080fd5b5061015c610377366004610c6a565b61077a565b34801561038857600080fd5b506103e6610397366004610c85565b600e6020908152600092835260408084209091529082529020805460019091015461ffff8216916201000081046001600160681b0390811692600160781b9092046001600160801b0316911684565b6040805161ffff90951685526001600160681b0393841660208601526001600160801b039092169184019190915216606082015260800161019a565b34801561042e57600080fd5b5060045461028b9060ff1681565b34801561044857600080fd5b506104a6610457366004610c6a565b600a602052600090815260409020805460019091015461ffff8216916001600160681b036201000082048116926001600160801b03600160781b909304831692811691600160801b9091041685565b6040805161ffff90961686526001600160681b0394851660208701526001600160801b03938416908601529116606084015216608082015260a00161019a565b3480156104f257600080fd5b506101db60035481565b34801561050857600080fd5b50600554610186906001600160a01b031681565b34801561052857600080fd5b506004546101869061010090046001600160a01b031681565b34801561054d57600080fd5b5061028b61055c366004610c6a565b60096020526000908152604090205460ff1681565b34801561057d57600080fd5b506105be61058c366004610c85565b600d60209081526000928352604080842090915290825290205461ffff8116906201000090046001600160801b031682565b6040805161ffff90931683526001600160801b0390911660208301520161019a565b3480156105ec57600080fd5b506106166105fb366004610c6a565b600c602052600090815260409020546001600160801b031681565b6040516001600160801b03909116815260200161019a565b34801561063a57600080fd5b506101866107a4565b61064b61080a565b61065b6106566108a9565b6108b3565b565b6106656108d7565b6001600160a01b0316336001600160a01b0316141561069c576106998160405180602001604052806000815250600061090a565b50565b610699610643565b6106ac6108d7565b6001600160a01b0316336001600160a01b0316141561070d576107088383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506001925061090a915050565b505050565b610708610643565b6010818154811061072557600080fd5b6000918252602090912001546001600160a01b0316905081565b60006107496108d7565b6001600160a01b0316336001600160a01b0316141561076f5761076a6108a9565b905090565b610777610643565b90565b6107826108d7565b6001600160a01b0316336001600160a01b0316141561069c5761069981610935565b60006107ae6108d7565b6001600160a01b0316336001600160a01b0316141561076f5761076a6108d7565b60606107f48383604051806060016040528060278152602001610e0e60279139610989565b9392505050565b6001600160a01b03163b151590565b6108126108d7565b6001600160a01b0316336001600160a01b0316141561065b5760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b600061076a610a01565b3660008037600080366000845af43d6000803e8080156108d2573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b61091383610a29565b6000825111806109205750805b156107085761092f83836107cf565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f61095e6108d7565b604080516001600160a01b03928316815291841660208301520160405180910390a161069981610a69565b6060600080856001600160a01b0316856040516109a69190610d92565b600060405180830381855af49150503d80600081146109e1576040519150601f19603f3d011682016040523d82523d6000602084013e6109e6565b606091505b50915091506109f786838387610b12565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6108fb565b610a3281610b90565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b038116610ace5760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084016108a0565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b60608315610b7e578251610b77576001600160a01b0385163b610b775760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108a0565b5081610b88565b610b888383610c24565b949350505050565b6001600160a01b0381163b610bfd5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016108a0565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610af1565b815115610c345781518083602001fd5b8060405162461bcd60e51b81526004016108a09190610dae565b80356001600160a01b0381168114610c6557600080fd5b919050565b600060208284031215610c7c57600080fd5b6107f482610c4e565b60008060408385031215610c9857600080fd5b610ca183610c4e565b9150610caf60208401610c4e565b90509250929050565b600080600060408486031215610ccd57600080fd5b610cd684610c4e565b9250602084013567ffffffffffffffff80821115610cf357600080fd5b818601915086601f830112610d0757600080fd5b813581811115610d1657600080fd5b876020828501011115610d2857600080fd5b6020830194508093505050509250925092565b60008060408385031215610d4e57600080fd5b610d5783610c4e565b9150602083013561ffff81168114610d6e57600080fd5b809150509250929050565b600060208284031215610d8b57600080fd5b5035919050565b60008251610da4818460208701610de1565b9190910192915050565b6020815260008251806020840152610dcd816040850160208701610de1565b601f01601f19169190910160400192915050565b60005b83811015610dfc578181015183820152602001610de4565b8381111561092f575050600091015256fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122036f809c4e904b02e83039b44d692edff671b576c18d4d8095c601174249a077a64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "admin()": {
        "details": "Returns the current admin. NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}. TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`"
      },
      "changeAdmin(address)": {
        "details": "Changes the admin of the proxy. Emits an {AdminChanged} event. NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}."
      },
      "implementation()": {
        "details": "Returns the current implementation. NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}. TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`"
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy. NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy, and then call a function from the new implementation as specified by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the proxied contract. NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "ETH()": {
        "notice": "ETH 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE"
      },
      "crContract()": {
        "notice": "crContract address that will be used to create new crcontract clone"
      },
      "cruizeProxy()": {
        "notice": "gnosis safe address where all the fund will be locked"
      },
      "cruizeTokens(address)": {
        "notice": "crtokens mint for user's share's"
      },
      "currentQueuedWithdrawalShares(address)": {
        "notice": "Queued withdraw shares for the current round"
      },
      "depositReceipts(address,address)": {
        "notice": "Stores the user's pending deposit for the round"
      },
      "feeRecipient()": {
        "notice": "Fee recipient for the management fees"
      },
      "gnosisSafe()": {
        "notice": "gnosis safe address where all the fund will be locked"
      },
      "isDisable(address)": {
        "notice": "Enable/Disable tokens"
      },
      "lastQueuedWithdrawAmounts(address)": {
        "notice": "Queued withdrawal amount in the last round"
      },
      "managementFee()": {
        "notice": "Management fee charged on entire AUM in rollToNextOption. Only charged when there is no loss."
      },
      "module()": {
        "notice": "role in charge of weekly vault operations such as transfer fund and burn tokens"
      },
      "performanceFee()": {
        "notice": "Performance fee charged on premiums earned in rollToNextOption. Only charged when there is no loss."
      },
      "roundPricePerShare(address,uint16)": {
        "notice": "On every round's close, the pricePerShare value of an crToken token is stored This is used to determine the number of shares to be returned to a user with their DepositReceipt.depositAmount"
      },
      "vaults(address)": {
        "notice": "Stores vaults state for every round"
      },
      "withdrawals(address,address)": {
        "notice": "Stores pending user withdrawals"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9194,
        "contract": "contracts/proxies/CruizeProxy.sol:CruizeProxy",
        "label": "feeRecipient",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9197,
        "contract": "contracts/proxies/CruizeProxy.sol:CruizeProxy",
        "label": "performanceFee",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 9199,
        "contract": "contracts/proxies/CruizeProxy.sol:CruizeProxy",
        "label": "isPerformanceFeeEnabled",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 9202,
        "contract": "contracts/proxies/CruizeProxy.sol:CruizeProxy",
        "label": "managementFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 9204,
        "contract": "contracts/proxies/CruizeProxy.sol:CruizeProxy",
        "label": "isManagementFeeEnable",
        "offset": 0,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 9207,
        "contract": "contracts/proxies/CruizeProxy.sol:CruizeProxy",
        "label": "module",
        "offset": 1,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 9210,
        "contract": "contracts/proxies/CruizeProxy.sol:CruizeProxy",
        "label": "gnosisSafe",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 9213,
        "contract": "contracts/proxies/CruizeProxy.sol:CruizeProxy",
        "label": "cruizeProxy",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 9216,
        "contract": "contracts/proxies/CruizeProxy.sol:CruizeProxy",
        "label": "crContract",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 9233,
        "contract": "contracts/proxies/CruizeProxy.sol:CruizeProxy",
        "label": "cruizeTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 9238,
        "contract": "contracts/proxies/CruizeProxy.sol:CruizeProxy",
        "label": "isDisable",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 9244,
        "contract": "contracts/proxies/CruizeProxy.sol:CruizeProxy",
        "label": "vaults",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_struct(VaultState)9101_storage)"
      },
      {
        "astId": 9249,
        "contract": "contracts/proxies/CruizeProxy.sol:CruizeProxy",
        "label": "lastQueuedWithdrawAmounts",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9254,
        "contract": "contracts/proxies/CruizeProxy.sol:CruizeProxy",
        "label": "currentQueuedWithdrawalShares",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint128)"
      },
      {
        "astId": 9262,
        "contract": "contracts/proxies/CruizeProxy.sol:CruizeProxy",
        "label": "withdrawals",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Withdrawal)9115_storage))"
      },
      {
        "astId": 9270,
        "contract": "contracts/proxies/CruizeProxy.sol:CruizeProxy",
        "label": "depositReceipts",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(DepositReceipt)9110_storage))"
      },
      {
        "astId": 9277,
        "contract": "contracts/proxies/CruizeProxy.sol:CruizeProxy",
        "label": "roundPricePerShare",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_mapping(t_uint16,t_uint256))"
      },
      {
        "astId": 9281,
        "contract": "contracts/proxies/CruizeProxy.sol:CruizeProxy",
        "label": "tokens",
        "offset": 0,
        "slot": "16",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 9285,
        "contract": "contracts/proxies/CruizeProxy.sol:CruizeProxy",
        "label": "__cruize_gap",
        "offset": 0,
        "slot": "17",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(DepositReceipt)9110_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct Types.DepositReceipt))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(DepositReceipt)9110_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(Withdrawal)9115_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct Types.Withdrawal))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Withdrawal)9115_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint16,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint16 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_uint256)"
      },
      "t_mapping(t_address,t_struct(DepositReceipt)9110_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Types.DepositReceipt)",
        "numberOfBytes": "32",
        "value": "t_struct(DepositReceipt)9110_storage"
      },
      "t_mapping(t_address,t_struct(VaultState)9101_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Types.VaultState)",
        "numberOfBytes": "32",
        "value": "t_struct(VaultState)9101_storage"
      },
      "t_mapping(t_address,t_struct(Withdrawal)9115_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Types.Withdrawal)",
        "numberOfBytes": "32",
        "value": "t_struct(Withdrawal)9115_storage"
      },
      "t_mapping(t_address,t_uint128)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint128)",
        "numberOfBytes": "32",
        "value": "t_uint128"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint16,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(DepositReceipt)9110_storage": {
        "encoding": "inplace",
        "label": "struct Types.DepositReceipt",
        "members": [
          {
            "astId": 9103,
            "contract": "contracts/proxies/CruizeProxy.sol:CruizeProxy",
            "label": "round",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 9105,
            "contract": "contracts/proxies/CruizeProxy.sol:CruizeProxy",
            "label": "amount",
            "offset": 2,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 9107,
            "contract": "contracts/proxies/CruizeProxy.sol:CruizeProxy",
            "label": "unredeemedShares",
            "offset": 15,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 9109,
            "contract": "contracts/proxies/CruizeProxy.sol:CruizeProxy",
            "label": "totalDeposit",
            "offset": 0,
            "slot": "1",
            "type": "t_uint104"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(VaultState)9101_storage": {
        "encoding": "inplace",
        "label": "struct Types.VaultState",
        "members": [
          {
            "astId": 9092,
            "contract": "contracts/proxies/CruizeProxy.sol:CruizeProxy",
            "label": "round",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 9094,
            "contract": "contracts/proxies/CruizeProxy.sol:CruizeProxy",
            "label": "lockedAmount",
            "offset": 2,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 9096,
            "contract": "contracts/proxies/CruizeProxy.sol:CruizeProxy",
            "label": "totalPending",
            "offset": 15,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 9098,
            "contract": "contracts/proxies/CruizeProxy.sol:CruizeProxy",
            "label": "queuedWithdrawShares",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 9100,
            "contract": "contracts/proxies/CruizeProxy.sol:CruizeProxy",
            "label": "cap",
            "offset": 16,
            "slot": "1",
            "type": "t_uint104"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Withdrawal)9115_storage": {
        "encoding": "inplace",
        "label": "struct Types.Withdrawal",
        "members": [
          {
            "astId": 9112,
            "contract": "contracts/proxies/CruizeProxy.sol:CruizeProxy",
            "label": "round",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 9114,
            "contract": "contracts/proxies/CruizeProxy.sol:CruizeProxy",
            "label": "shares",
            "offset": 2,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint104": {
        "encoding": "inplace",
        "label": "uint104",
        "numberOfBytes": "13"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}