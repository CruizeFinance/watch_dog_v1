{
  "address": "0xe84c8b640D05B424327269f209eD569570145271",
  "abi": [
    {
      "inputs": [],
      "name": "ZERO_AMOUNT",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_LOCK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POOL",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRECISION",
      "outputs": [
        {
          "internalType": "uint248",
          "name": "",
          "type": "uint248"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RAMSES_GAUGE",
      "outputs": [
        {
          "internalType": "contract IGauge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RAMSES_ROUTER",
      "outputs": [
        {
          "internalType": "contract IRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RAMSES_VOTER",
      "outputs": [
        {
          "internalType": "contract IVoter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RAMSES_VOTING_ESCROW",
      "outputs": [
        {
          "internalType": "contract IVotingEscrow",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RAM_TOKEN",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "depositLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "deposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "onlyLiquidity",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "derivedBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "derivedSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token1",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_stable",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lp",
      "outputs": [
        {
          "internalType": "contract IPair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_time",
          "type": "uint256"
        }
      ],
      "name": "setLockTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "storedRewardsPerUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token0",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token1",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x688288c68dd1b1235a6a6182905c93cc7d4783e73c97fba2333586d8308e4e38",
  "receipt": {
    "to": null,
    "from": "0x96d331Ca0D9c9D1b53A46CD050A698ae4c4c246F",
    "contractAddress": "0xe84c8b640D05B424327269f209eD569570145271",
    "transactionIndex": 7,
    "gasUsed": "9098439",
    "logsBloom": "0x
    "blockHash": "0xae1cfaf0729e2816eaeb1dd6efd4e55b9e5fbf91db54fcbdfe71a99551c4c9a4",
    "transactionHash": "0x688288c68dd1b1235a6a6182905c93cc7d4783e73c97fba2333586d8308e4e38",
    "logs": [],
    "blockNumber": 81310046,
    "cumulativeGasUsed": "13277176",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "8f92f93d454d0d8f43ce2d8577a7fc5a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ZERO_AMOUNT\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_LOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint248\",\"name\":\"\",\"type\":\"uint248\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RAMSES_GAUGE\",\"outputs\":[{\"internalType\":\"contract IGauge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RAMSES_ROUTER\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RAMSES_VOTER\",\"outputs\":[{\"internalType\":\"contract IVoter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RAMSES_VOTING_ESCROW\",\"outputs\":[{\"internalType\":\"contract IVotingEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RAM_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"depositLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"onlyLiquidity\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"derivedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"derivedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_stable\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lp\",\"outputs\":[{\"internalType\":\"contract IPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"storedRewardsPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"deposit(uint256,uint256)\":{\"details\":\"deposit function will take amount of tokens\",\"params\":{\"amount0\":\"amount of token0\",\"amount1\":\"amount of token1\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Triggers stopped state. Requirements: - The contract must not be paused.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Returns to normal state. Requirements: - The contract must be paused.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deposit(uint256,uint256)\":{\"notice\":\"be careful when you pass arguments pass amount0 according to the token0 decimals and others\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vaults/ramses/RamsesVault.sol\":\"RamsesVault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/interfaces/ramses/IGauge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IGauge {\\n\\n    function earned(\\n        address token,\\n        address account\\n    ) external view returns (uint256);\\n\\n    function rewardPerToken(address) external view returns(uint256);\\n\\n    function derivedBalances(address) external view returns(uint256);\\n\\n    function userRewardPerTokenStored(address,address) external view returns(uint256);\\n\\n    function storedRewardsPerUser(address,address) external view returns(uint256);\\n\\n    function rewardRate(address) external view returns(uint256);\\n\\n    function lastUpdateTime(address token) external view returns(uint256);\\n\\n    function lastTimeRewardApplicable(address token) external view returns(uint256);\\n\\n    function derivedSupply() external view returns(uint256);\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function withdrawAll() external;\\n    \\n    function depositAll(uint256 tokenId) external;\\n\\n    function deposit(uint256 amount, uint256 tokenId) external;\\n\\n    function getReward(address account, address[] memory tokens) external;\\n\\n    function claimFees() external returns (uint claimed0, uint claimed1);\\n\\n    function voter() external view returns (address);\\n}\\n\",\"keccak256\":\"0xea575d2c82f5b778311c5c44f0f63691013ad453f8375e927ff25e2e23a0e3db\",\"license\":\"MIT\"},\"contracts/interfaces/ramses/IMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.18;\\n\\ninterface IMinter {\\n    function update_period() external returns (uint);\\n\\n    function active_period() external view returns (uint);\\n}\",\"keccak256\":\"0x8d8644d66bd09ffa3e110752ba1b42bac061d87edbfe4065628aaaca1622906b\",\"license\":\"MIT\"},\"contracts/interfaces/ramses/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IPair {\\n\\n    function metadata()\\n        external\\n        view\\n        returns (\\n            uint256 dec0,\\n            uint256 dec1,\\n            uint256 r0,\\n            uint256 r1,\\n            bool st,\\n            address t0,\\n            address t1\\n        );\\n\\n    function claimFees() external returns (uint256, uint256);\\n\\n    function tokens() external returns (address, address);\\n    \\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint256 _reserve0,\\n            uint256 _reserve1,\\n            uint256 _blockTimestampLast\\n        );\\n\\n    function getAmountOut(uint256, address) external view returns (uint256);\\n}\",\"keccak256\":\"0xd9fcf40a6c031279a1a64cac962b330956502c60aa5798b736eb00d323151d12\",\"license\":\"MIT\"},\"contracts/interfaces/ramses/IRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IRouter {\\n    function pairFor(address tokenA, address tokenB, bool stable) external view returns (address pair);\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n        \\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function quoteAddLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint256 amountADesired,\\n        uint256 amountBDesired\\n    )\\n        external\\n        view\\n        returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n\\n}\",\"keccak256\":\"0x05e6664c535ef6dcd59a62594b2dd139c89db46f7b71303f646815b74df1af30\",\"license\":\"MIT\"},\"contracts/interfaces/ramses/IVoter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IVoter {\\n    function _ve() external view returns (address);\\n\\n    function governor() external view returns (address);\\n\\n    function weights(address) external view returns (uint256);\\n\\n    function emergencyCouncil() external view returns (address);\\n\\n    function attachTokenToGauge(uint _tokenId, address account) external;\\n\\n    function detachTokenFromGauge(uint _tokenId, address account) external;\\n\\n    function emitDeposit(uint _tokenId, address account, uint amount) external;\\n\\n    function emitWithdraw(uint _tokenId, address account, uint amount) external;\\n\\n    function isWhitelisted(address token) external view returns (bool);\\n\\n    function notifyRewardAmount(uint amount) external;\\n\\n    function distribute(address _gauge) external;\\n\\n    function gauges(address pool) external view returns (address);\\n\\n    function feeDistributers(address gauge) external view returns (address);\\n\\n    function vote(\\n        uint256 tokenId,\\n        address[] calldata _poolVote,\\n        uint256[] calldata _weights\\n    ) external;\\n\\n    function reset(uint256 _tokenId) external;\\n    \\n    function claimFees(\\n        address[] memory _fees,\\n        address[][] memory _tokens,\\n        uint256 _tokenId\\n    ) external;\\n}\\n\",\"keccak256\":\"0xd364325e1064c77f7efd540559a0acbe215505a08fbde15d79d8576c455b97a8\",\"license\":\"MIT\"},\"contracts/interfaces/ramses/IVotingEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IVotingEscrow {\\n    struct Point {\\n        int128 bias;\\n        int128 slope; // # -dweight / dt\\n        uint256 ts;\\n        uint256 blk; // block\\n    }\\n    enum DepositType {\\n        DEPOSIT_FOR_TYPE,\\n        CREATE_LOCK_TYPE,\\n        INCREASE_LOCK_AMOUNT,\\n        INCREASE_UNLOCK_TIME,\\n        MERGE_TYPE\\n    }\\n\\n    event Deposit(\\n        address indexed provider,\\n        uint256 tokenId,\\n        uint256 value,\\n        uint256 indexed locktime,\\n        DepositType deposit_type,\\n        uint256 ts\\n    );\\n\\n    function attachments(uint256 tokenId) external view returns (uint256);\\n    function token() external view returns (address);\\n\\n    function team() external returns (address);\\n\\n    function epoch() external view returns (uint);\\n\\n    function point_history(uint loc) external view returns (Point memory);\\n\\n    function user_point_history(\\n        uint tokenId,\\n        uint loc\\n    ) external view returns (Point memory);\\n\\n    function user_point_epoch(uint tokenId) external view returns (uint);\\n\\n    function ownerOf(uint) external view returns (address);\\n\\n    function isApprovedOrOwner(address, uint) external view returns (bool);\\n\\n    function transferFrom(address, address, uint) external;\\n\\n    function voting(uint tokenId) external;\\n\\n    function abstain(uint tokenId) external;\\n\\n    function attach(uint tokenId) external;\\n\\n    function detach(uint tokenId) external;\\n\\n    function checkpoint() external;\\n\\n    function increase_amount(uint256 _tokenId, uint256 _value) external;\\n\\n    function increase_unlock_time(\\n        uint256 _tokenId,\\n        uint256 _lock_duration\\n    ) external;\\n\\n    function deposit_for(uint tokenId, uint value) external;\\n\\n    function create_lock(\\n        uint256 _value,\\n        uint256 _lock_duration\\n    ) external returns (uint256);\\n\\n    function create_lock_for(uint, uint, address) external returns (uint);\\n\\n     function withdraw(uint256 _tokenId) external;\\n    \\n    function balanceOfNFT(uint) external view returns (uint);\\n\\n    function balanceOfNFTAt(uint, uint) external view returns (uint);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function locked__end(uint) external view returns (uint);\\n}\\n\\n/*\\nu1 => deposit 1 eth and 1000 usdc\\nu2 => deposit 1 eth and 1000 usdc [after 5 minutes]\\nwe will \\n    1- add liquidity\\n    1- deposit liquidity in guage\\n    1- getRewards\\n    1- create a lock\\n    1- vote the nft\\nu3 => deposit 1 eth and 1000 usdc [after 5 minutes]\\n    1- add liquidity\\n    1- deposit liquidity in guage\\n    1- getRewards\\n    1- increase amount\\n*/\",\"keccak256\":\"0x93f38209f4f926ede1afd68f55639a6dcfeef8837b2cdcc3a757c855c375867e\",\"license\":\"MIT\"},\"contracts/module/ownable/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity =0.8.18;\\nimport \\\"./utils/ContextUpgradeable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __ownable_gap;\\n}\\n\",\"keccak256\":\"0x30714fc13f6d4fbe18d9ccd941570044d46dcdafe932d668179e17be9200595b\",\"license\":\"MIT\"},\"contracts/module/ownable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity =0.8.18;\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) ||\\n                (!AddressUpgradeable.isContract(address(this)) &&\\n                    _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(\\n            !_initializing && _initialized < version,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x2062199327e949d2eec314ff068f72f6d075213e5bf9c052d6e6032f2236cceb\",\"license\":\"MIT\"},\"contracts/module/ownable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"contracts/module/ownable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __context_gap;\\n}\\n\",\"keccak256\":\"0x39ab47d35ba48d3f1be44c3d83cc01477b7e0688e74aef999018767fe9511dd3\",\"license\":\"MIT\"},\"contracts/module/pausable/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../ownable/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is OwnableUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x43973881b2b0e6fc9aabe69f79b62020fbd4dae9567c38d0ef98bdcfdd7c9db8\",\"license\":\"MIT\"},\"contracts/module/reentrancyGuard/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../ownable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __reentrancy_gap;\\n}\\n\",\"keccak256\":\"0x408bbc44595fed62ad8f79d18d119f2630e68ceb6ef3ff481878f6b9ff0dd7cd\",\"license\":\"MIT\"},\"contracts/storage/RamsesVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.18;\\n\\nimport \\\"../interfaces/ramses/IMinter.sol\\\";\\nimport \\\"../interfaces/ramses/IPair.sol\\\";\\nimport \\\"../interfaces/ramses/IVoter.sol\\\";\\nimport \\\"../interfaces/ramses/IGauge.sol\\\";\\nimport \\\"../interfaces/ramses/IRouter.sol\\\";\\nimport \\\"../interfaces/ramses/IVotingEscrow.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\nabstract contract RamsesVaultStorage {\\n\\n    struct Deposits {\\n        uint256 amount0;\\n        uint256 amount1;\\n        uint256 liquidity;\\n        bool onlyLiquidity;\\n    }\\n\\n    address public POOL = 0x5513a48F3692Df1d9C793eeaB1349146B2140386;\\n    IVoter public RAMSES_VOTER = IVoter(0xAAA2564DEb34763E3d05162ed3f5C2658691f499);\\n    IERC20 public  RAM_TOKEN = IERC20(0xAAA6C1E32C55A7Bfa8066A6FAE9b42650F262418);\\n    IGauge public  RAMSES_GAUGE = IGauge(0xDBA865F11bb0a9Cd803574eDd782d8B26Ee65767);\\n    IRouter public  RAMSES_ROUTER = IRouter(0xAAA87963EFeB6f7E0a2711F397663105Acb1805e);\\n    IVotingEscrow public  RAMSES_VOTING_ESCROW = IVotingEscrow(0xAAA343032aA79eE9a6897Dab03bef967c3289a06);\\n\\n    uint248 public  PRECISION = 1e18;\\n    bool public stable;\\n    \\n    IPair public lp;\\n    IERC20 public token0;\\n    IERC20 public token1;\\n    uint256 public tokenId;\\n    address public feeRecipient;\\n    uint256 public derivedSupply;\\n    uint256 public MAX_LOCK = 1 weeks;\\n    uint256 public rewardPerTokenStored;\\n\\n\\n    mapping(address => Deposits) public deposits;\\n    mapping(address => uint256) public derivedBalances;\\n    mapping(address => uint256) public storedRewardsPerUser;\\n    mapping(address => uint256) public userRewardPerTokenStored;\\n    \\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __cruize_ramese_gap;\\n}\",\"keccak256\":\"0xcdf8ae7da0747280757973c87a1a5d4efd4b01ea29c0ae670ee57f5ccaace7c1\",\"license\":\"MIT\"},\"contracts/vaults/ramses/RamsesVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.18;\\n\\nimport \\\"../../storage/RamsesVaultStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../../module/ownable/OwnableUpgradeable.sol\\\";\\nimport \\\"../../module/pausable/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../../module/reentrancyGuard/ReentrancyGuardUpgradeable.sol\\\";\\n\\n// => Lock RAM-Tokens [votingEscrow] => veNFT => vote [Voter] => ClaimFee[Voter]\\n// -> withdraw -> getReward[Gauge] -> updateUserRewards -> removeLiquidity -> Transfer RAM to user\\n\\ncontract RamsesVault is\\n    RamsesVaultStorage,\\n    PausableUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    error ZERO_AMOUNT();\\n\\n    event Deposit(uint256 amount0, uint256 amount1, uint256 liquidity);\\n    event Withdraw(\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 liquidity,\\n        uint256 reward\\n    );\\n\\n    function initialize(\\n        address _token0,\\n        address _token1,\\n        bool _stable,\\n        address _feeRecipient\\n    ) public initializer {\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n\\n        address pairToken = RAMSES_ROUTER.pairFor(_token0, _token1, _stable);\\n        lp = IPair(pairToken);\\n        token0 = IERC20(_token0);\\n        token1 = IERC20(_token1);\\n        stable = _stable;\\n        feeRecipient = _feeRecipient;\\n    }\\n\\n    /**\\n     * @dev deposit function will take amount of tokens\\n     * @param amount0 amount of token0\\n     * @param amount1 amount of token1\\n     * @notice be careful when you pass arguments pass amount0 according to the token0 decimals and others\\n     */\\n    function deposit(uint256 amount0, uint256 amount1) external nonReentrant {\\n        if (amount0 == 0 || amount1 == 0) revert ZERO_AMOUNT();\\n        (uint256 amountA , uint256 amountB ,uint256 liquidity) = _addLiquidity(amount0, amount1);\\n        Deposits memory deposit = deposits[msg.sender];\\n        deposit.amount0 += amountA;\\n        deposit.amount1 += amountB;\\n        deposit.liquidity += liquidity;\\n        deposits[msg.sender] = deposit;\\n\\n        if(amount0 > amountA )token0.transfer(msg.sender, amount0.sub(amountA));\\n        if(amount1 > amountB )token1.transfer(msg.sender, amount1.sub(amountB));\\n\\n        _deposit(liquidity);\\n        emit Deposit(amountA, amountB, liquidity);\\n    }\\n\\n    /*\\n     * @dev This function will take LP tokens of the pool of token0-token1\\n     * @param liquidity is the amount of lp tokens\\n     */\\n    function depositLP(uint256 liquidity) external nonReentrant {\\n        if (liquidity == 0) revert ZERO_AMOUNT();\\n        lp.transferFrom(msg.sender, address(this), liquidity);\\n\\n        Deposits memory deposit = deposits[msg.sender];\\n        deposit.liquidity += liquidity;\\n        deposits[msg.sender] = deposit;\\n\\n        _deposit(liquidity);\\n    }\\n\\n    /*\\n     * @dev This function will withdraw user tokens either user deposited pool tokens or pool lps\\n     */\\n    function withdraw() external nonReentrant {\\n        address account = msg.sender;\\n        Deposits memory deposit = deposits[account];\\n        _claimRamTokens();\\n        RAMSES_GAUGE.withdraw(deposit.liquidity);\\n        updateRewardPerToken(account);\\n        uint256 amount0;\\n        uint256 amount1;\\n        \\n        (amount0, amount1) = _removeLiquidity(account);\\n\\n        uint256 _reward = storedRewardsPerUser[account];\\n        if (_reward > 0 && RAM_TOKEN.balanceOf(address(this)) >= _reward) {\\n            storedRewardsPerUser[account] = 0;\\n            RAM_TOKEN.transfer(\\n                account,\\n                Math.min(_reward, RAM_TOKEN.balanceOf(address(this)))\\n            );\\n        }\\n        derivedBalances[account] = derivedBalance(account);\\n        emit Withdraw(amount0, amount1, deposit.liquidity, _reward);\\n\\n        delete deposits[account];\\n    }\\n\\n    /* \\n    * @dev update locking period\\n    */\\n    function setLockTime(uint256 _time) external onlyOwner {\\n        if (_time == 0) revert ZERO_AMOUNT();\\n        MAX_LOCK = _time;\\n    }\\n\\n    function _deposit(uint256 liquidity) internal {\\n        lp.approve(address(RAMSES_GAUGE), liquidity);\\n        RAMSES_GAUGE.depositAll(tokenId);\\n        updateRewardPerToken(msg.sender);\\n        derivedBalances[msg.sender] = derivedBalance(msg.sender);\\n    }\\n\\n    function _addLiquidity(\\n        uint256 amount0,\\n        uint256 amount1\\n    ) internal returns (uint256 amountA, uint256 amountB,uint256 liquidity)  {\\n        token0.transferFrom(msg.sender, address(this), amount0);\\n        token1.transferFrom(msg.sender, address(this), amount1);\\n        token0.approve(address(RAMSES_ROUTER), amount0);\\n        token1.approve(address(RAMSES_ROUTER), amount1);\\n        (amountA,amountB,liquidity) = RAMSES_ROUTER.addLiquidity(\\n            address(token0),\\n            address(token1),\\n            stable,\\n            amount0,\\n            amount1,\\n            0,\\n            0,\\n            address(this),\\n            block.timestamp + 600\\n        );\\n    }\\n\\n    function _removeLiquidity(\\n        address _account\\n    ) internal returns (uint256 amount0, uint256 amount1) {\\n        Deposits memory deposit = deposits[_account];\\n        lp.approve(address(RAMSES_ROUTER), deposit.liquidity);\\n\\n        (amount0, amount1) = RAMSES_ROUTER.removeLiquidity(\\n            address(token0),\\n            address(token1),\\n            stable,\\n            deposit.liquidity,\\n            0,\\n            0,\\n            _account,\\n            block.timestamp + 600\\n        );\\n    }\\n\\n    function _claimRamTokens() internal {\\n        address[] memory tokens = new address[](1);\\n        tokens[0] = address(RAM_TOKEN);\\n        // claim RAM tokens\\n        RAMSES_GAUGE.getReward(address(this), tokens);\\n    }\\n\\n    function updateRewardPerToken(address account) internal {\\n        derivedSupply = RAMSES_GAUGE.derivedSupply();\\n        rewardPerTokenStored = RAMSES_GAUGE.rewardPerToken(address(RAM_TOKEN));\\n        storedRewardsPerUser[account] = earned(account);\\n        userRewardPerTokenStored[account] = rewardPerTokenStored;\\n    }\\n\\n    function derivedBalance(address account) internal view returns (uint256) {\\n        uint256 _balance = deposits[account].liquidity;\\n        uint256 _derived = (_balance * 40) / 100;\\n        uint256 _adjusted = 0;\\n        return Math.min((_derived + _adjusted), _balance);\\n    }\\n\\n    function earned(address account) internal view returns (uint256) {\\n        return\\n            (derivedBalances[account] *\\n                (RAMSES_GAUGE.rewardPerToken(address(RAM_TOKEN)) -\\n                    userRewardPerTokenStored[account])) /\\n            uint256(PRECISION) +\\n            storedRewardsPerUser[account];\\n    }\\n}\\n\",\"keccak256\":\"0x35b9159633bbd842a461b8aa743b85891569686371a87d6d487a7d9a9ea81df3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600080546001600160a01b0319908116735513a48f3692df1d9c793eeab1349146b21403861790915560018054821673aaa2564deb34763e3d05162ed3f5c2658691f49917905560028054821673aaa6c1e32c55a7bfa8066a6fae9b42650f26241817905560038054821673dba865f11bb0a9cd803574edd782d8b26ee6576717905560048054821673aaa87963efeb6f7e0a2711f397663105acb1805e1790556005805490911673aaa343032aa79ee9a6897dab03bef967c3289a06179055600680547fff0000000000000000000000000000000000000000000000000000000000000016670de0b6b3a764000017905562093a80600d5534801561010957600080fd5b50611d2a806101196000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c8063715018a61161010f578063df136d65116100a2578063f2fde38b11610071578063f2fde38b1461040a578063fb162e031461041d578063fc7e286d14610430578063ffb34d211461048a57600080fd5b8063df136d65146103c8578063e2bbb158146103d1578063e51af7ec146103e4578063eb37acfc146103f757600080fd5b8063aaf5eb68116100de578063aaf5eb681461036e578063ae04d45d14610399578063d21220a7146103ac578063d7da4bb0146103bf57600080fd5b8063715018a61461033a5780637535d246146103425780638456cb59146103555780638da5cb5b1461035d57600080fd5b80633df060f311610187578063469048401161015657806346904840146102f35780635c975abb1461030657806363fb415b1461031157806365a5d5f01461033157600080fd5b80633df060f3146102a55780633f4ba83a146102c55780634172da5e146102cd578063452e7eaf146102e057600080fd5b806317d70f7c116101c357806317d70f7c1461025b57806322be3de114610264578063313c06a0146102885780633ccfd60b1461029b57600080fd5b806302e8ac8d146101ea5780630a638c2e1461021d5780630dfe168114610248575b600080fd5b61020a6101f8366004611a54565b60126020526000908152604090205481565b6040519081526020015b60405180910390f35b600254610230906001600160a01b031681565b6040516001600160a01b039091168152602001610214565b600854610230906001600160a01b031681565b61020a600a5481565b60065461027890600160f81b900460ff1681565b6040519015158152602001610214565b600754610230906001600160a01b031681565b6102a361049d565b005b61020a6102b3366004611a54565b60116020526000908152604090205481565b6102a36107c2565b600454610230906001600160a01b031681565b600354610230906001600160a01b031681565b600b54610230906001600160a01b031681565b60aa5460ff16610278565b61020a61031f366004611a54565b60106020526000908152604090205481565b61020a600d5481565b6102a36107d2565b600054610230906001600160a01b031681565b6102a36107e4565b6078546001600160a01b0316610230565b600654610381906001600160f81b031681565b6040516001600160f81b039091168152602001610214565b6102a36103a7366004611a78565b6107f4565b600954610230906001600160a01b031681565b61020a600c5481565b61020a600e5481565b6102a36103df366004611a91565b610822565b600554610230906001600160a01b031681565b6102a3610405366004611a78565b610ab9565b6102a3610418366004611a54565b610c10565b6102a361042b366004611ac1565b610c8b565b61046861043e366004611a54565b600f6020526000908152604090208054600182015460028301546003909301549192909160ff1684565b6040805194855260208501939093529183015215156060820152608001610214565b600154610230906001600160a01b031681565b6104a5610e8d565b336000818152600f602090815260409182902082516080810184528154815260018201549281019290925260028101549282019290925260039091015460ff16151560608201526104f4610ee6565b6003546040808301519051632e1a7d4d60e01b81526001600160a01b0390921691632e1a7d4d9161052b9160040190815260200190565b600060405180830381600087803b15801561054557600080fd5b505af1158015610559573d6000803e3d6000fd5b5050505061056682610f95565b600080610572846110b9565b6001600160a01b0386166000908152601160205260409020549193509150801580159061060957506002546040516370a0823160e01b815230600482015282916001600160a01b0316906370a0823190602401602060405180830381865afa1580156105e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106069190611b1d565b10155b15610714576001600160a01b038581166000908152601160205260408082209190915560025490516370a0823160e01b815230600482015291169063a9059cbb9087906106a390859085906370a0823190602401602060405180830381865afa15801561067a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069e9190611b1d565b61126a565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156106ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107129190611b36565b505b61071d85611284565b6001600160a01b038616600090815260106020908152604091829020929092558581015181518681529283018590528282015260608201839052517fb088a38065873c9d2da855cf4a2e4aa012b28e45ead53c5b9edbcf71614cfb239181900360800190a1505050506001600160a01b03166000908152600f6020526040812081815560018082018390556002820192909255600301805460ff1916905560ab55565b565b6107ca6112df565b6107c0611339565b6107da6112df565b6107c0600061138b565b6107ec6112df565b6107c06113dd565b6107fc6112df565b8060000361081d57604051630f6fa54560e41b815260040160405180910390fd5b600d55565b61082a610e8d565b811580610835575080155b1561085357604051630f6fa54560e41b815260040160405180910390fd5b6000806000610862858561141a565b336000908152600f6020908152604091829020825160808101845281548082526001830154938201939093526002820154938101939093526003015460ff1615156060830152939650919450925090849082906108c0908390611b69565b9052506020810180518491906108d7908390611b69565b9052506040810180518391906108ee908390611b69565b905250336000908152600f60209081526040918290208351815590830151600182015590820151600282015560608201516003909101805460ff1916911515919091179055838611156109c8576008546001600160a01b031663a9059cbb336109578988611706565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156109a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c69190611b36565b505b82851115610a5d576009546001600160a01b031663a9059cbb336109ec8887611706565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610a37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5b9190611b36565b505b610a6682611712565b60408051858152602081018590529081018390527f33da4f9b82b3e18a281ca2cabbe2f076925692abb593b7ea3f850009e8ec97709060600160405180910390a150505050610ab5600160ab55565b5050565b610ac1610e8d565b80600003610ae257604051630f6fa54560e41b815260040160405180910390fd5b6007546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610b39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5d9190611b36565b50336000908152600f6020908152604091829020825160808101845281548152600182015492810192909252600281015492820183815260039091015460ff16151560608301529091839190610bb4908390611b69565b905250336000908152600f60209081526040918290208351815590830151600182015590820151600282015560608201516003909101805460ff1916911515919091179055610c0282611712565b50610c0d600160ab55565b50565b610c186112df565b6001600160a01b038116610c825760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b610c0d8161138b565b604554610100900460ff1615808015610cab5750604554600160ff909116105b80610cc55750303b158015610cc5575060455460ff166001145b610d285760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610c79565b6045805460ff191660011790558015610d4b576045805461ff0019166101001790555b610d53611818565b610d5b611847565b6004805460405163260f701f60e11b81526001600160a01b03888116938201939093528683166024820152851515604482015260009290911690634c1ee03e90606401602060405180830381865afa158015610dbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ddf9190611b7c565b600780546001600160a01b03199081166001600160a01b0393841617909155600880548216898416179055600980548216888416179055600680546001600160f81b0316600160f81b88151502179055600b8054909116918516919091179055508015610e86576045805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b600260ab5403610edf5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610c79565b600260ab55565b60408051600180825281830190925260009160208083019080368337505060025482519293506001600160a01b031691839150600090610f2857610f28611b99565b6001600160a01b0392831660209182029290920101526003546040516331279d3d60e01b81529116906331279d3d90610f679030908590600401611baf565b600060405180830381600087803b158015610f8157600080fd5b505af1158015610e86573d6000803e3d6000fd5b600360009054906101000a90046001600160a01b03166001600160a01b031663d7da4bb06040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fe8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100c9190611b1d565b600c5560035460025460405163f122977760e01b81526001600160a01b03918216600482015291169063f122977790602401602060405180830381865afa15801561105b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107f9190611b1d565b600e5561108b81611876565b6001600160a01b03909116600090815260116020908152604080832093909355600e54601290915291902055565b6001600160a01b038181166000908152600f60209081526040808320815160808101835281548152600182015493810193909352600281015483830181905260039091015460ff161515606084015260075460048054935163095ea7b360e01b815293871690840152602483019190915292938493169063095ea7b3906044016020604051808303816000875af1158015611158573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117c9190611b36565b5060045460085460095460065460408501516001600160a01b0394851694630dede6c4948116931691600160f81b900460ff16906000808b6111c042610258611b69565b60405160e08a901b6001600160e01b03191681526001600160a01b039889166004820152968816602488015294151560448701526064860193909352608485019190915260a484015290921660c482015260e48101919091526101040160408051808303816000875af115801561123b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125f9190611c0b565b909590945092505050565b6000818310611279578161127b565b825b90505b92915050565b6001600160a01b0381166000908152600f60205260408120600201548160646112ae836028611c2f565b6112b89190611c46565b905060006112cf6112c98284611b69565b8461126a565b95945050505050565b600160ab55565b6078546001600160a01b031633146107c05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610c79565b611341611959565b60aa805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b607880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6113e56119a2565b60aa805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861136e3390565b6008546040516323b872dd60e01b815233600482015230602482015260448101849052600091829182916001600160a01b0316906323b872dd906064016020604051808303816000875af1158015611476573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149a9190611b36565b506009546040516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b03909116906323b872dd906064016020604051808303816000875af11580156114f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115169190611b36565b506008546004805460405163095ea7b360e01b81526001600160a01b0391821692810192909252602482018890529091169063095ea7b3906044016020604051808303816000875af1158015611570573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115949190611b36565b506009546004805460405163095ea7b360e01b81526001600160a01b0391821692810192909252602482018790529091169063095ea7b3906044016020604051808303816000875af11580156115ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116129190611b36565b506004546008546009546006546001600160a01b0393841693635a47ddc3938116921690600160f81b900460ff1689896000803061165242610258611b69565b60405160e08b901b6001600160e01b03191681526001600160a01b03998a166004820152978916602489015295151560448801526064870194909452608486019290925260a485015260c484015290921660e4820152610104810191909152610124016060604051808303816000875af11580156116d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f89190611c68565b919790965090945092505050565b600061127b8284611c96565b60075460035460405163095ea7b360e01b81526001600160a01b0391821660048201526024810184905291169063095ea7b3906044016020604051808303816000875af1158015611767573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178b9190611b36565b50600354600a5460405163c6f678bd60e01b81526001600160a01b039092169163c6f678bd916117c19160040190815260200190565b600060405180830381600087803b1580156117db57600080fd5b505af11580156117ef573d6000803e3d6000fd5b505050506117fc33610f95565b61180533611284565b3360009081526010602052604090205550565b604554610100900460ff1661183f5760405162461bcd60e51b8152600401610c7990611ca9565b6107c06119e8565b604554610100900460ff1661186e5760405162461bcd60e51b8152600401610c7990611ca9565b6107c0611a18565b6001600160a01b03818116600090815260116020908152604080832054600654601290935281842054600354600254935163f122977760e01b81529387166004850152949591946001600160f81b0390941693909291169063f122977790602401602060405180830381865afa1580156118f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119189190611b1d565b6119229190611c96565b6001600160a01b0385166000908152601060205260409020546119459190611c2f565b61194f9190611c46565b61127e9190611b69565b60aa5460ff166107c05760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610c79565b60aa5460ff16156107c05760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610c79565b604554610100900460ff16611a0f5760405162461bcd60e51b8152600401610c7990611ca9565b6107c03361138b565b604554610100900460ff166112d85760405162461bcd60e51b8152600401610c7990611ca9565b6001600160a01b0381168114610c0d57600080fd5b600060208284031215611a6657600080fd5b8135611a7181611a3f565b9392505050565b600060208284031215611a8a57600080fd5b5035919050565b60008060408385031215611aa457600080fd5b50508035926020909101359150565b8015158114610c0d57600080fd5b60008060008060808587031215611ad757600080fd5b8435611ae281611a3f565b93506020850135611af281611a3f565b92506040850135611b0281611ab3565b91506060850135611b1281611a3f565b939692955090935050565b600060208284031215611b2f57600080fd5b5051919050565b600060208284031215611b4857600080fd5b8151611a7181611ab3565b634e487b7160e01b600052601160045260246000fd5b8082018082111561127e5761127e611b53565b600060208284031215611b8e57600080fd5b8151611a7181611a3f565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b038381168252604060208084018290528451918401829052600092858201929091906060860190855b81811015611bfd578551851683529483019491830191600101611bdf565b509098975050505050505050565b60008060408385031215611c1e57600080fd5b505080516020909101519092909150565b808202811582820484141761127e5761127e611b53565b600082611c6357634e487b7160e01b600052601260045260246000fd5b500490565b600080600060608486031215611c7d57600080fd5b8351925060208401519150604084015190509250925092565b8181038181111561127e5761127e611b53565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220728900e16031dacd80d3d29cb69c640a63a43d1bda44486a493605638051eb5364736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e55760003560e01c8063715018a61161010f578063df136d65116100a2578063f2fde38b11610071578063f2fde38b1461040a578063fb162e031461041d578063fc7e286d14610430578063ffb34d211461048a57600080fd5b8063df136d65146103c8578063e2bbb158146103d1578063e51af7ec146103e4578063eb37acfc146103f757600080fd5b8063aaf5eb68116100de578063aaf5eb681461036e578063ae04d45d14610399578063d21220a7146103ac578063d7da4bb0146103bf57600080fd5b8063715018a61461033a5780637535d246146103425780638456cb59146103555780638da5cb5b1461035d57600080fd5b80633df060f311610187578063469048401161015657806346904840146102f35780635c975abb1461030657806363fb415b1461031157806365a5d5f01461033157600080fd5b80633df060f3146102a55780633f4ba83a146102c55780634172da5e146102cd578063452e7eaf146102e057600080fd5b806317d70f7c116101c357806317d70f7c1461025b57806322be3de114610264578063313c06a0146102885780633ccfd60b1461029b57600080fd5b806302e8ac8d146101ea5780630a638c2e1461021d5780630dfe168114610248575b600080fd5b61020a6101f8366004611a54565b60126020526000908152604090205481565b6040519081526020015b60405180910390f35b600254610230906001600160a01b031681565b6040516001600160a01b039091168152602001610214565b600854610230906001600160a01b031681565b61020a600a5481565b60065461027890600160f81b900460ff1681565b6040519015158152602001610214565b600754610230906001600160a01b031681565b6102a361049d565b005b61020a6102b3366004611a54565b60116020526000908152604090205481565b6102a36107c2565b600454610230906001600160a01b031681565b600354610230906001600160a01b031681565b600b54610230906001600160a01b031681565b60aa5460ff16610278565b61020a61031f366004611a54565b60106020526000908152604090205481565b61020a600d5481565b6102a36107d2565b600054610230906001600160a01b031681565b6102a36107e4565b6078546001600160a01b0316610230565b600654610381906001600160f81b031681565b6040516001600160f81b039091168152602001610214565b6102a36103a7366004611a78565b6107f4565b600954610230906001600160a01b031681565b61020a600c5481565b61020a600e5481565b6102a36103df366004611a91565b610822565b600554610230906001600160a01b031681565b6102a3610405366004611a78565b610ab9565b6102a3610418366004611a54565b610c10565b6102a361042b366004611ac1565b610c8b565b61046861043e366004611a54565b600f6020526000908152604090208054600182015460028301546003909301549192909160ff1684565b6040805194855260208501939093529183015215156060820152608001610214565b600154610230906001600160a01b031681565b6104a5610e8d565b336000818152600f602090815260409182902082516080810184528154815260018201549281019290925260028101549282019290925260039091015460ff16151560608201526104f4610ee6565b6003546040808301519051632e1a7d4d60e01b81526001600160a01b0390921691632e1a7d4d9161052b9160040190815260200190565b600060405180830381600087803b15801561054557600080fd5b505af1158015610559573d6000803e3d6000fd5b5050505061056682610f95565b600080610572846110b9565b6001600160a01b0386166000908152601160205260409020549193509150801580159061060957506002546040516370a0823160e01b815230600482015282916001600160a01b0316906370a0823190602401602060405180830381865afa1580156105e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106069190611b1d565b10155b15610714576001600160a01b038581166000908152601160205260408082209190915560025490516370a0823160e01b815230600482015291169063a9059cbb9087906106a390859085906370a0823190602401602060405180830381865afa15801561067a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069e9190611b1d565b61126a565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156106ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107129190611b36565b505b61071d85611284565b6001600160a01b038616600090815260106020908152604091829020929092558581015181518681529283018590528282015260608201839052517fb088a38065873c9d2da855cf4a2e4aa012b28e45ead53c5b9edbcf71614cfb239181900360800190a1505050506001600160a01b03166000908152600f6020526040812081815560018082018390556002820192909255600301805460ff1916905560ab55565b565b6107ca6112df565b6107c0611339565b6107da6112df565b6107c0600061138b565b6107ec6112df565b6107c06113dd565b6107fc6112df565b8060000361081d57604051630f6fa54560e41b815260040160405180910390fd5b600d55565b61082a610e8d565b811580610835575080155b1561085357604051630f6fa54560e41b815260040160405180910390fd5b6000806000610862858561141a565b336000908152600f6020908152604091829020825160808101845281548082526001830154938201939093526002820154938101939093526003015460ff1615156060830152939650919450925090849082906108c0908390611b69565b9052506020810180518491906108d7908390611b69565b9052506040810180518391906108ee908390611b69565b905250336000908152600f60209081526040918290208351815590830151600182015590820151600282015560608201516003909101805460ff1916911515919091179055838611156109c8576008546001600160a01b031663a9059cbb336109578988611706565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156109a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c69190611b36565b505b82851115610a5d576009546001600160a01b031663a9059cbb336109ec8887611706565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610a37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5b9190611b36565b505b610a6682611712565b60408051858152602081018590529081018390527f33da4f9b82b3e18a281ca2cabbe2f076925692abb593b7ea3f850009e8ec97709060600160405180910390a150505050610ab5600160ab55565b5050565b610ac1610e8d565b80600003610ae257604051630f6fa54560e41b815260040160405180910390fd5b6007546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610b39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5d9190611b36565b50336000908152600f6020908152604091829020825160808101845281548152600182015492810192909252600281015492820183815260039091015460ff16151560608301529091839190610bb4908390611b69565b905250336000908152600f60209081526040918290208351815590830151600182015590820151600282015560608201516003909101805460ff1916911515919091179055610c0282611712565b50610c0d600160ab55565b50565b610c186112df565b6001600160a01b038116610c825760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b610c0d8161138b565b604554610100900460ff1615808015610cab5750604554600160ff909116105b80610cc55750303b158015610cc5575060455460ff166001145b610d285760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610c79565b6045805460ff191660011790558015610d4b576045805461ff0019166101001790555b610d53611818565b610d5b611847565b6004805460405163260f701f60e11b81526001600160a01b03888116938201939093528683166024820152851515604482015260009290911690634c1ee03e90606401602060405180830381865afa158015610dbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ddf9190611b7c565b600780546001600160a01b03199081166001600160a01b0393841617909155600880548216898416179055600980548216888416179055600680546001600160f81b0316600160f81b88151502179055600b8054909116918516919091179055508015610e86576045805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b600260ab5403610edf5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610c79565b600260ab55565b60408051600180825281830190925260009160208083019080368337505060025482519293506001600160a01b031691839150600090610f2857610f28611b99565b6001600160a01b0392831660209182029290920101526003546040516331279d3d60e01b81529116906331279d3d90610f679030908590600401611baf565b600060405180830381600087803b158015610f8157600080fd5b505af1158015610e86573d6000803e3d6000fd5b600360009054906101000a90046001600160a01b03166001600160a01b031663d7da4bb06040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fe8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100c9190611b1d565b600c5560035460025460405163f122977760e01b81526001600160a01b03918216600482015291169063f122977790602401602060405180830381865afa15801561105b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107f9190611b1d565b600e5561108b81611876565b6001600160a01b03909116600090815260116020908152604080832093909355600e54601290915291902055565b6001600160a01b038181166000908152600f60209081526040808320815160808101835281548152600182015493810193909352600281015483830181905260039091015460ff161515606084015260075460048054935163095ea7b360e01b815293871690840152602483019190915292938493169063095ea7b3906044016020604051808303816000875af1158015611158573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117c9190611b36565b5060045460085460095460065460408501516001600160a01b0394851694630dede6c4948116931691600160f81b900460ff16906000808b6111c042610258611b69565b60405160e08a901b6001600160e01b03191681526001600160a01b039889166004820152968816602488015294151560448701526064860193909352608485019190915260a484015290921660c482015260e48101919091526101040160408051808303816000875af115801561123b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125f9190611c0b565b909590945092505050565b6000818310611279578161127b565b825b90505b92915050565b6001600160a01b0381166000908152600f60205260408120600201548160646112ae836028611c2f565b6112b89190611c46565b905060006112cf6112c98284611b69565b8461126a565b95945050505050565b600160ab55565b6078546001600160a01b031633146107c05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610c79565b611341611959565b60aa805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b607880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6113e56119a2565b60aa805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861136e3390565b6008546040516323b872dd60e01b815233600482015230602482015260448101849052600091829182916001600160a01b0316906323b872dd906064016020604051808303816000875af1158015611476573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149a9190611b36565b506009546040516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b03909116906323b872dd906064016020604051808303816000875af11580156114f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115169190611b36565b506008546004805460405163095ea7b360e01b81526001600160a01b0391821692810192909252602482018890529091169063095ea7b3906044016020604051808303816000875af1158015611570573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115949190611b36565b506009546004805460405163095ea7b360e01b81526001600160a01b0391821692810192909252602482018790529091169063095ea7b3906044016020604051808303816000875af11580156115ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116129190611b36565b506004546008546009546006546001600160a01b0393841693635a47ddc3938116921690600160f81b900460ff1689896000803061165242610258611b69565b60405160e08b901b6001600160e01b03191681526001600160a01b03998a166004820152978916602489015295151560448801526064870194909452608486019290925260a485015260c484015290921660e4820152610104810191909152610124016060604051808303816000875af11580156116d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f89190611c68565b919790965090945092505050565b600061127b8284611c96565b60075460035460405163095ea7b360e01b81526001600160a01b0391821660048201526024810184905291169063095ea7b3906044016020604051808303816000875af1158015611767573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178b9190611b36565b50600354600a5460405163c6f678bd60e01b81526001600160a01b039092169163c6f678bd916117c19160040190815260200190565b600060405180830381600087803b1580156117db57600080fd5b505af11580156117ef573d6000803e3d6000fd5b505050506117fc33610f95565b61180533611284565b3360009081526010602052604090205550565b604554610100900460ff1661183f5760405162461bcd60e51b8152600401610c7990611ca9565b6107c06119e8565b604554610100900460ff1661186e5760405162461bcd60e51b8152600401610c7990611ca9565b6107c0611a18565b6001600160a01b03818116600090815260116020908152604080832054600654601290935281842054600354600254935163f122977760e01b81529387166004850152949591946001600160f81b0390941693909291169063f122977790602401602060405180830381865afa1580156118f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119189190611b1d565b6119229190611c96565b6001600160a01b0385166000908152601060205260409020546119459190611c2f565b61194f9190611c46565b61127e9190611b69565b60aa5460ff166107c05760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610c79565b60aa5460ff16156107c05760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610c79565b604554610100900460ff16611a0f5760405162461bcd60e51b8152600401610c7990611ca9565b6107c03361138b565b604554610100900460ff166112d85760405162461bcd60e51b8152600401610c7990611ca9565b6001600160a01b0381168114610c0d57600080fd5b600060208284031215611a6657600080fd5b8135611a7181611a3f565b9392505050565b600060208284031215611a8a57600080fd5b5035919050565b60008060408385031215611aa457600080fd5b50508035926020909101359150565b8015158114610c0d57600080fd5b60008060008060808587031215611ad757600080fd5b8435611ae281611a3f565b93506020850135611af281611a3f565b92506040850135611b0281611ab3565b91506060850135611b1281611a3f565b939692955090935050565b600060208284031215611b2f57600080fd5b5051919050565b600060208284031215611b4857600080fd5b8151611a7181611ab3565b634e487b7160e01b600052601160045260246000fd5b8082018082111561127e5761127e611b53565b600060208284031215611b8e57600080fd5b8151611a7181611a3f565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b038381168252604060208084018290528451918401829052600092858201929091906060860190855b81811015611bfd578551851683529483019491830191600101611bdf565b509098975050505050505050565b60008060408385031215611c1e57600080fd5b505080516020909101519092909150565b808202811582820484141761127e5761127e611b53565b600082611c6357634e487b7160e01b600052601260045260246000fd5b500490565b600080600060608486031215611c7d57600080fd5b8351925060208401519150604084015190509250925092565b8181038181111561127e5761127e611b53565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220728900e16031dacd80d3d29cb69c640a63a43d1bda44486a493605638051eb5364736f6c63430008120033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "deposit(uint256,uint256)": {
        "details": "deposit function will take amount of tokens",
        "params": {
          "amount0": "amount of token0",
          "amount1": "amount of token1"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Triggers stopped state. Requirements: - The contract must not be paused."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Returns to normal state. Requirements: - The contract must be paused."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deposit(uint256,uint256)": {
        "notice": "be careful when you pass arguments pass amount0 according to the token0 decimals and others"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12791,
        "contract": "contracts/vaults/ramses/RamsesVault.sol:RamsesVault",
        "label": "POOL",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 12797,
        "contract": "contracts/vaults/ramses/RamsesVault.sol:RamsesVault",
        "label": "RAMSES_VOTER",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IVoter)9741"
      },
      {
        "astId": 12803,
        "contract": "contracts/vaults/ramses/RamsesVault.sol:RamsesVault",
        "label": "RAM_TOKEN",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)2581"
      },
      {
        "astId": 12809,
        "contract": "contracts/vaults/ramses/RamsesVault.sol:RamsesVault",
        "label": "RAMSES_GAUGE",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IGauge)9390"
      },
      {
        "astId": 12815,
        "contract": "contracts/vaults/ramses/RamsesVault.sol:RamsesVault",
        "label": "RAMSES_ROUTER",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IRouter)9625"
      },
      {
        "astId": 12821,
        "contract": "contracts/vaults/ramses/RamsesVault.sol:RamsesVault",
        "label": "RAMSES_VOTING_ESCROW",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IVotingEscrow)9943"
      },
      {
        "astId": 12824,
        "contract": "contracts/vaults/ramses/RamsesVault.sol:RamsesVault",
        "label": "PRECISION",
        "offset": 0,
        "slot": "6",
        "type": "t_uint248"
      },
      {
        "astId": 12826,
        "contract": "contracts/vaults/ramses/RamsesVault.sol:RamsesVault",
        "label": "stable",
        "offset": 31,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 12829,
        "contract": "contracts/vaults/ramses/RamsesVault.sol:RamsesVault",
        "label": "lp",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IPair)9495"
      },
      {
        "astId": 12832,
        "contract": "contracts/vaults/ramses/RamsesVault.sol:RamsesVault",
        "label": "token0",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IERC20)2581"
      },
      {
        "astId": 12835,
        "contract": "contracts/vaults/ramses/RamsesVault.sol:RamsesVault",
        "label": "token1",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IERC20)2581"
      },
      {
        "astId": 12837,
        "contract": "contracts/vaults/ramses/RamsesVault.sol:RamsesVault",
        "label": "tokenId",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 12839,
        "contract": "contracts/vaults/ramses/RamsesVault.sol:RamsesVault",
        "label": "feeRecipient",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 12841,
        "contract": "contracts/vaults/ramses/RamsesVault.sol:RamsesVault",
        "label": "derivedSupply",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 12844,
        "contract": "contracts/vaults/ramses/RamsesVault.sol:RamsesVault",
        "label": "MAX_LOCK",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 12846,
        "contract": "contracts/vaults/ramses/RamsesVault.sol:RamsesVault",
        "label": "rewardPerTokenStored",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 12851,
        "contract": "contracts/vaults/ramses/RamsesVault.sol:RamsesVault",
        "label": "deposits",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_struct(Deposits)12788_storage)"
      },
      {
        "astId": 12855,
        "contract": "contracts/vaults/ramses/RamsesVault.sol:RamsesVault",
        "label": "derivedBalances",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12859,
        "contract": "contracts/vaults/ramses/RamsesVault.sol:RamsesVault",
        "label": "storedRewardsPerUser",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12863,
        "contract": "contracts/vaults/ramses/RamsesVault.sol:RamsesVault",
        "label": "userRewardPerTokenStored",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12868,
        "contract": "contracts/vaults/ramses/RamsesVault.sol:RamsesVault",
        "label": "__cruize_ramese_gap",
        "offset": 0,
        "slot": "19",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10629,
        "contract": "contracts/vaults/ramses/RamsesVault.sol:RamsesVault",
        "label": "_initialized",
        "offset": 0,
        "slot": "69",
        "type": "t_uint8"
      },
      {
        "astId": 10632,
        "contract": "contracts/vaults/ramses/RamsesVault.sol:RamsesVault",
        "label": "_initializing",
        "offset": 1,
        "slot": "69",
        "type": "t_bool"
      },
      {
        "astId": 11116,
        "contract": "contracts/vaults/ramses/RamsesVault.sol:RamsesVault",
        "label": "__context_gap",
        "offset": 0,
        "slot": "70",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10501,
        "contract": "contracts/vaults/ramses/RamsesVault.sol:RamsesVault",
        "label": "_owner",
        "offset": 0,
        "slot": "120",
        "type": "t_address"
      },
      {
        "astId": 10621,
        "contract": "contracts/vaults/ramses/RamsesVault.sol:RamsesVault",
        "label": "__ownable_gap",
        "offset": 0,
        "slot": "121",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11135,
        "contract": "contracts/vaults/ramses/RamsesVault.sol:RamsesVault",
        "label": "_paused",
        "offset": 0,
        "slot": "170",
        "type": "t_bool"
      },
      {
        "astId": 11250,
        "contract": "contracts/vaults/ramses/RamsesVault.sol:RamsesVault",
        "label": "_status",
        "offset": 0,
        "slot": "171",
        "type": "t_uint256"
      },
      {
        "astId": 11308,
        "contract": "contracts/vaults/ramses/RamsesVault.sol:RamsesVault",
        "label": "__reentrancy_gap",
        "offset": 0,
        "slot": "172",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)2581": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IGauge)9390": {
        "encoding": "inplace",
        "label": "contract IGauge",
        "numberOfBytes": "20"
      },
      "t_contract(IPair)9495": {
        "encoding": "inplace",
        "label": "contract IPair",
        "numberOfBytes": "20"
      },
      "t_contract(IRouter)9625": {
        "encoding": "inplace",
        "label": "contract IRouter",
        "numberOfBytes": "20"
      },
      "t_contract(IVoter)9741": {
        "encoding": "inplace",
        "label": "contract IVoter",
        "numberOfBytes": "20"
      },
      "t_contract(IVotingEscrow)9943": {
        "encoding": "inplace",
        "label": "contract IVotingEscrow",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Deposits)12788_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RamsesVaultStorage.Deposits)",
        "numberOfBytes": "32",
        "value": "t_struct(Deposits)12788_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Deposits)12788_storage": {
        "encoding": "inplace",
        "label": "struct RamsesVaultStorage.Deposits",
        "members": [
          {
            "astId": 12781,
            "contract": "contracts/vaults/ramses/RamsesVault.sol:RamsesVault",
            "label": "amount0",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12783,
            "contract": "contracts/vaults/ramses/RamsesVault.sol:RamsesVault",
            "label": "amount1",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12785,
            "contract": "contracts/vaults/ramses/RamsesVault.sol:RamsesVault",
            "label": "liquidity",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 12787,
            "contract": "contracts/vaults/ramses/RamsesVault.sol:RamsesVault",
            "label": "onlyLiquidity",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint248": {
        "encoding": "inplace",
        "label": "uint248",
        "numberOfBytes": "31"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}